//  _____  _____  _   _  _____ ______   ___   _____  _____ ______ 
// |  __ \|  ___|| \ | ||  ___|| ___ \ / _ \ |_   _||  ___||  _  \
// | |  \/| |__  |  \| || |__  | |_/ // /_\ \  | |  | |__  | | | |
// | | __ |  __| | . ` ||  __| |    / |  _  |  | |  |  __| | | | |
// | |_\ \| |___ | |\  || |___ | |\ \ | | | |  | |  | |___ | |/ /
//  \____/\____/ \_| \_/\____/ \_| \_|\_| |_/  \_/  \____/ |___/
//
// ---------------------------------------------------------------------------------------------------------------------
//
//                                                  Warning!
// Never modify this file by hand, because it's automatically generated by an external tool and will be overwritten.
//
// ---------------------------------------------------------------------------------------------------------------------

#ifndef CLUSEK_RT_OBJECTSERIALIZERS_H
#define CLUSEK_RT_OBJECTSERIALIZERS_H

#include <fstream>
#include <nlohmann/json.hpp>
#include <ostream>
#include <string>
#include <iomanip>

#include "..\common\ConfigData.h"

#define LOAD_PRIMITIVE_DATA_TO_FIELD(JSON, OBJECT, FIELD, TYPE) if (!JSON[#FIELD].is_null()) OBJECT.FIELD = JSON[#FIELD].get<TYPE>();
#define SAVE_PRIMITIVE_DATA_TO_JSON(JSON, OBJECT, FIELD) JSON[#FIELD] = OBJECT.FIELD;

namespace ObjectSerializers
{
    // DESERIALIZERS
    void Deserialize(std::ifstream& fileStream, ConfigData& object)
    {
        nlohmann::json json;
        fileStream >> json;

        LOAD_PRIMITIVE_DATA_TO_FIELD(json, object, FilePath, std::string);
    }

    // SERIALIZERS
    void Serialize(std::ofstream& fileStream, const ConfigData& object)
    {
        nlohmann::json json;

        SAVE_PRIMITIVE_DATA_TO_JSON(json, object, FilePath);

        fileStream << std::setw(3) << json;
    }
};

#endif //CLUSEK_RT_OBJECTSERIALIZERS_H