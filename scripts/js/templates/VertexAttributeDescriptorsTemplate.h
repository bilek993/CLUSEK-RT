//  _____  _____  _   _  _____ ______   ___   _____  _____ ______ 
// |  __ \|  ___|| \ | ||  ___|| ___ \ / _ \ |_   _||  ___||  _  \
// | |  \/| |__  |  \| || |__  | |_/ // /_\ \  | |  | |__  | | | |
// | | __ |  __| | . ` ||  __| |    / |  _  |  | |  |  __| | | | |
// | |_\ \| |___ | |\  || |___ | |\ \ | | | |  | |  | |___ | |/ /
//  \____/\____/ \_| \_/\____/ \_| \_|\_| |_/  \_/  \____/ |___/
//
// ---------------------------------------------------------------------------------------------------------------------
//
//                                                  Warning!
// Never modify this file by hand, because it's automatically generated by an external tool and will be overwritten.
//
// ---------------------------------------------------------------------------------------------------------------------

#ifndef {{ guardName }}
#define {{ guardName }}

#include <cstddef>
#include <vector>
#include <vulkan/vulkan.h>

{{ #vertexStructures }}
#include "{{{ includePath }}}"
{{ /vertexStructures }}

namespace {{ namespace }}
{
{{ #vertexStructures }}
    static std::vector<VkVertexInputAttributeDescription> GetDescriptionFor{{ structName }}()
    {
        std::vector<VkVertexInputAttributeDescription> attributeDescriptions{};

        {{ #vertexAttributes }}
        // {{ structName }}::{{ name }}
        VkVertexInputAttributeDescription desc{{ structName }}{{ name }}{};
        desc{{ structName }}{{ name }}.binding = {{ binding }};
        desc{{ structName }}{{ name }}.location = {{ location }};
        desc{{ structName }}{{ name }}.format = {{ format }};
        desc{{ structName }}{{ name }}.offset = offsetof({{ structName }}, {{ name }});
        attributeDescriptions.emplace_back(desc{{ structName }}{{ name }});
        {{ /vertexAttributes }}

        return attributeDescriptions;
    }
{{ /vertexStructures }}
}

#endif //{{ guardName }}